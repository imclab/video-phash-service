#!/usr/bin/env node
'use strict'

const download = require('download-cache')
const hashStream = require('hash-stream')
const crypto = require('crypto')

const phashFile = require('../lib/phash-file')
const redis = require('../lib/redis')
const config = require('../config')

const program = require('commander')
  .usage('<video_url>')
  .parse(process.argv)

const assert = require('assert')

const url = program.args[0]
assert(url, 'Video URL must be supplied!')

console.log('Phasing video: %s', url)

const hash = calculate(url)
let sha

download(url).then(function (filename) {
  console.log('Downloaded video: %s', url)
  return hashStream(filename, 'sha256').then(function (_sha) {
    sha = _sha.toString('hex')
    return phashFile(filename)
  })
}).then(function (phashes) {
  console.log('Phashed video: %s', url)

  /**
   * TODO: make more DRY. there's a lot of repetition with the app.
   */

  phashes = JSON.stringify(phashes.map(toHex))
  return redis.multi()
  // cache for a month
  .set('cache:' + hash, phashes, 'EX', String(config.maxage))
  .set('cache:' + sha, phashes, 'EX', String(config.maxage))
  // unset as processing
  .del('processing:' + hash)
  .del('processing:' + sha)
  .exec().then(function () {
    console.log('Successfully phashed video: %s', url)
    process.exit(0)
  })
}).catch(/* istanbul ignore next */ function (err) {
  console.error(err.stack)
  // unset as processing
  return redis.multi()
  .del('processing:' + hash)
  .del('processing:' + sha)
  .exec().then(function () {
    process.exit(1)
  }).catch(function (err) {
    console.error(err.stack)
    process.exit(1)
  })
})

/**
 * Calculate the sha256 of url.
 */

function calculate(url) {
  return crypto.createHash('sha256').update(url).digest('hex')
}

/**
 * Convert a buffer to hex.
 */

function toHex(buf) {
  return buf.toString('hex')
}
